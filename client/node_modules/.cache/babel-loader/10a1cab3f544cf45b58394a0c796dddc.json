{"ast":null,"code":"import { useScrollRestoration } from './scrollRestoration';\n\nconst isFormSubmitDisabled = (inputs, formState) => {\n  const requiredFields = Object.entries(inputs).flatMap(([name, args]) => args.validator.required ? [name] : []);\n  const touchedRequiredFields = requiredFields.every(item => {\n    return formState.touched[item] && formState.values[item];\n  });\n  const errors = Object.keys(formState.errors).some(e => {\n    return formState.errors[e]; // note: both true and undefined represent a valid input\n  });\n  const disableSubmit = !touchedRequiredFields || errors > 0;\n  return disableSubmit;\n};\n\nexport { useScrollRestoration, isFormSubmitDisabled };","map":{"version":3,"sources":["/Users/ecook/Documents/projects/emilyweb/client/src/utils/index.js"],"names":["useScrollRestoration","isFormSubmitDisabled","inputs","formState","requiredFields","Object","entries","flatMap","name","args","validator","required","touchedRequiredFields","every","item","touched","values","errors","keys","some","e","disableSubmit"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,qBAArC;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB;AAClD,QAAMC,cAAc,GAAGC,MAAM,CAACC,OAAP,CAAeJ,MAAf,EAAuBK,OAAvB,CAA+B,CAAC,CAACC,IAAD,EAAOC,IAAP,CAAD,KACpDA,IAAI,CAACC,SAAL,CAAeC,QAAf,GAA0B,CAACH,IAAD,CAA1B,GAAmC,EADd,CAAvB;AAIA,QAAMI,qBAAqB,GAAGR,cAAc,CAACS,KAAf,CAAqBC,IAAI,IAAI;AACzD,WAAOX,SAAS,CAACY,OAAV,CAAkBD,IAAlB,KAA2BX,SAAS,CAACa,MAAV,CAAiBF,IAAjB,CAAlC;AACD,GAF6B,CAA9B;AAIA,QAAMG,MAAM,GAAGZ,MAAM,CAACa,IAAP,CAAYf,SAAS,CAACc,MAAtB,EAA8BE,IAA9B,CAAmCC,CAAC,IAAI;AACrD,WAAOjB,SAAS,CAACc,MAAV,CAAiBG,CAAjB,CAAP,CADqD,CAC1B;AAC5B,GAFc,CAAf;AAIA,QAAMC,aAAa,GAAG,CAACT,qBAAD,IAA0BK,MAAM,GAAG,CAAzD;AAEA,SAAOI,aAAP;AACD,CAhBD;;AAkBA,SAASrB,oBAAT,EAA+BC,oBAA/B","sourcesContent":["import { useScrollRestoration } from './scrollRestoration'\n\nconst isFormSubmitDisabled = (inputs, formState) => {\n  const requiredFields = Object.entries(inputs).flatMap(([name, args]) =>\n    args.validator.required ? [name] : []\n  )\n\n  const touchedRequiredFields = requiredFields.every(item => {\n    return formState.touched[item] && formState.values[item]\n  })\n\n  const errors = Object.keys(formState.errors).some(e => {\n    return formState.errors[e] // note: both true and undefined represent a valid input\n  })\n\n  const disableSubmit = !touchedRequiredFields || errors > 0\n\n  return disableSubmit\n}\n\nexport { useScrollRestoration, isFormSubmitDisabled }\n"]},"metadata":{},"sourceType":"module"}